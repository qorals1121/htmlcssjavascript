==========<<html, css>>===========
article, section 언제 쓰는지?
아티클 = 독립적인 콘텐츠, 섹션을 포함할 수 있음
섹션 = 콘텐츠 영역을 나타냄
의미 부여하기 나름이고 기능적인 차이는 x
큼직큼직하거나 하나로 크게 묶는것, 구조가 나뉘는 것 위주로 사용하는 것이 좋음

id="container" 언제 쓰는지?
header, nav, main, fotter 등을 하나로 묶어주는 것이 body인데, body에다가 속성을 주기에 부담스러울 때
id="container"를 준다. id를 주는 이유는 상위이기 때문

레이아웃 (레벨)?
너비는 마진을 포함함. 요소의 너비가 100%라는 건 마진이 포함되어있는 것임.
그래서 인라인 레벨 요소를 주게되면 마진이 먹지 않는다. 그래서 인라인 블럭을 많이 사용한다. 
flex는 인라인블록요소를 포함한다고 생각하면 된다.

margin padding?
둘 다 여백이지만 테두리 (border)를 기준으로 바깥은 마진, 안쪽은 패딩이다. 
마진은 밖에서 서로를 밀어낼 때 사용하고, 
패딩은 안쪽에 글자가 딱 붙어 나올 때 선과 내용물의 여백을 줄 때 사용한다.
box-size는 높이, 넓이를 어느영역까지 볼 것 인가를 결정짓는 것인데, 
컨텐츠까지의 가로세로인지 보더까지의 가로세로인지를 확인한다. 
기본적으로는 콘텐츠 영역으로 보지만 생각했던 것과 다른 결과가 나올 수 있기 때문에 
boder-box로 바꿔주는 것이 좋다.

flex?
박스 안에서 어떻게 요소를 배치할 건지 결정짓는 것. 주축 → 과 교차축 ↓으로 구분된다.
기본적으로는 띄워져있고 나머지는 마진으로 채워져있는데, 인라인 블록으로 옆을 처리하게 되면 글자처럼 취급되는 문제가 있다.
flex는 기본적으로 주축 정렬이다. (justify는 주축 기준이다) center정렬은 주축의 가운데로 정렬되는 것이고 colum은 교차축과 주축이 바뀐 것이라고 생각하면 된다.
space-between = 양끝과 가운데에 정렬하는 것
space-around = 컨텐츠들을 동일한 간격으로 정렬하는 것
매번 상황마다 다르기 때문에 직접 사용해보는 것이 좋다.

button type="button" class="button" type="button" 왜 쓰는지?
버튼의 기본 성질은 전송(submit)이기 때문에 type="button"을 넣어줌으로써 전송을 막는다. 
(전송될시 #의 새 주소로 감.)

==========<<javascript>>============
let const 차이점?
원래는 구분없이 var만 사용하다가 구분을 짓기 위해 사용
상수는 const, 변수는 let을 사용함 (상수를 사용하는 이유는 변하면 안되기 때문에)

선택자를 언제 구분해서 사용해야하는지?
선택자 = 태그, 아이디, 클래스 선택자 등등이 있음
선택자는 querySelector가 들어간 경우에만 선택자를 사용한다.

funtcion 화살표?
함수는 변수 안에 담을 수 있다.

오류잡는법?
홈페이지를 열어 콘솔창에서 확인해야함


